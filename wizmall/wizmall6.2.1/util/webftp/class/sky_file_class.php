<?php
/** 
* file 관련 class
* 
* @filename : sky_file_class.php
* @version  : v 1.2 2003.04.08 18:27:22
*             v 1.0 2002.10.08
* @author    : nsl <smpoem@magicn.com>
* @access    : public
* @copyright : Copyright ⓒ 2002-2003 nsl All rights reserved.
*/

class SkyFile {
    
	function SkyFile() {

	}

    /**
     * 파일 확장자 구하기
     *
     * @param string $filename : 파일명
     *
     * @access public
     * @return string : 파일 확장자
     */
    function getFileExtension($filename) {

        // .bash -> . 으로 시작하면 (확장자가 없으면)
        if (strpos($filename, ".") == '0') return 'notext';

        return substr(strrchr($filename,'.'), 1); // test.gif -> gif
        //return preg_replace('/.*\.(.+?)$/', '\\1', $file );
    }


    /**
    * 파일 퍼미션 문자 구하기
    *
    * @param  integer  $num : 퍼미션 문자하나 (7, 5 ...)
    *
    * @access public
    * @return string : 파일 퍼미션 문자
    * @see getPermsStrAll()
    */
    function getPermsStr($num) {

        switch($num) {

            case '1' : $string = '--x';     break;
            case '2' : $string  = '-w-';    break;
            case '3' : $string  = '-wx';    break;
            case '4' : $string  = 'r--';    break;
            case '5' : $string  = 'r-x';    break;
            case '6' : $string  = 'rw-';    break;
            case '7' : $string  = 'rwx';    break;
            default :  $string  = '---';

        } // switch End

        return $string;
    }


    /**
     * 퍼미션 문자 모두 구함
     *
     * @param string $num : 퍼미션 (777, 755 ...)
     *
     * @access public
     * @return string : 퍼미션 문자
     */
    function getPermsStrAll($num) {

        $r = substr($num, 0, 1);
        $w = substr($num, 1, 1);
        $e = substr($num, 2, 1);

        return SkyFile::getPermsStr($r) . SkyFile::getPermsStr($w) . SkyFile::getPermsStr($e);
    }


    /**
     * 파일 퍼미션 구하기
     *
     * @param string $filename : 파일명
     *
     * @access public
     * @return integer : 파일 퍼미션 (777, 755 ...)
     */
    function getPerms ($filename) {

       // 파일이면
       if (@is_file($filename)) {

           return decoct(@fileperms($filename) - 32768);

       // 디렉토리이면
       } else if (@is_dir($filename)) {

           return decoct(@fileperms($filename) - 16384);

       } else {

           return '';
       }
    } 

 
    /**
    * 파일의 소유자 name 구함 
    * 
    * @param  string  $filename : 파일명, 디렉토리명 , 
    *
    * @access public
    * @return string : 소유자명
    */
    function getFileOwnerName($filename) {

        // os 가 원도우이면
        if (substr(PHP_OS, 0, 3) == 'WIN')
            return '';
    
        //                           사용자번호
        $uidTemp = @posix_getpwuid(fileowner($filename));
        return $uidTemp['name'];
    }


    /**
     * 접근 가능한 디렉토리인지 여부
     *
     * @param string  $dirperms : 디렉토리 퍼미션 (755, 644 ...)
     * @param integer $dirAccessPerms : 퍼미션 마지막 문자 705 -> 5
     *
     * @access public
     * @return boolean 
     */
    function isDirAccessPerms($dirperms, $dirAccessPerms = 5) {

        if (substr($dirperms, -1, 1) >= $dirAccessPerms) return true;
        else return false;
    }


    /**
     * 접근 가능한 파일인지 여부
     *
     * @param  string  $fileperms : 파일 퍼미션 (755, 644 ...)
     * @param  integer $fileAccessPerms : 퍼미션 마지막 문자 705 -> 5
     *
     * @access public
     * @return boolean 
     */
    function isFileAccessPerms($fileperms, $fileAccessPerms = 4) {

        if (substr($fileperms, -1, 1) >= $fileAccessPerms) return true;
        else return false;
    }

    /**
  	 * 파일을 마지막으로 수정한 시간 구하기
     *
     * @param string $filename : 파일명, 디렉토리명
     * @param string $format   : 날짜 형식
     *
     * @access public
     * @return date
 	*/
	function getFilemTime($filename, $format = 'Y-m-d H:i:s') {

	    return date ($format, filemtime($filename)); 
	}


    /**
     * ., .. 를 반영한 실제 경로 구하기
     *
     * @param string $cd : 경로
     *
     * @access public
     * @return string
     */
    function getRealpath($cd) {

        $cd = realpath($cd);

        // php 버전에 따라서 /home -> /home
        //                         -> /home/ --> 일 경우 맨 끝의 / 제거
        if ($cd != '/' && substr($cd, -1, 1) == '/')
            $cd = substr($cd, 0, strlen($cd) - 1);

        return $cd;
    }


    /**
     * 변수를 파일로 저장 가능하도록 가공 
     * (변수, 배열, 클래스 모두 가능)
     * 
     * @param mixed value : $var
     * 
     * @access public
     * @return 
     */
    function getSerialize($var) {

        return serialize($var);
    }


    /**
     * getSerialize() 함수 값을 되돌림
     *
     * @param string : $var
     *
     * @access public
     * @return
     */
    function getUnSerialize($var) {

        return unserialize($var);
    }


    /**
     * URL 메세지 읽어오기
     *
     * @param string $fileurl : 파일 URL (http://www.xxx.xxx/tstmsg.hmtl)
     *
     * @access public
     * @return string : 파일내용
     */
    function getSockFileRead($fileurl) {

        ob_start();
        @readfile($fileurl);
        $msg = ob_get_contents();
        ob_end_clean();
        
        return $msg;
    }


    /**
     * 지정한 디렉토리의 디렉토리, 파일 목록 구함
     *
     * @param  string   $curdir : 현재 디렉토리 위치 /home/test
     * @param  boolean  $isParent :  .., . 출력 유무
     * 
     * @access public
     * @return array : 파일, 디렉토리 배열
     */
    function getCurDirList($curdir, $isParent = true) {

        $listDir  = array();
        $listFile = array();

        $dir = @opendir($curdir);

        if (!$dir) {

            echo "<font color=red>* Error : '$curdir' Access Error! </font>";
            return;
        }

    	while($var = @readdir($dir)) { 

	    	$filename = $curdir . "/" . $var;

            // 링크 파일은 출력 안함 is_dir, is_file 에서 에러남
            if (@is_link($filename)) {


            // 디렉토리이면
    	    } else if(@is_dir($filename)) { 

                if( $var != '.' && $var != '..') 
                    $listDir[]=  $var; 
                else if ($isParent) 
          	        $listDir[]=  $var; 

            // 파일이면
    		}else if (@is_file($filename)) {

                $listFile[] = $var;
    		} else {
            // 시스템 관련 파일은 출력 안함
            
    		}

        }  // while End

    	@closedir($dir);

    	@sort($listDir);
        if(count($listFile)) @sort($listFile);

    	return array($listDir, $listFile);

    } // getCurDirList() End



    /**
     * 파일 사이즈를 단위별로 구한다
     *
     * @param  string   $file      : 파일명 또는 파일크기(isGetSize=false)
     * @param  integer  $precision : 소숫점 자릿수
     * @param  boolean  $isGetSize : true(파일사이즈구함), false(구하지 않음)
     *
     * @access public
     * @return string : 파일 사이즈
     */
    function getFileSizeCons($file, $precision = 0, $isGetSize = true) {

       // Setup some common file size measurements.
       $kb = 1024;         // Kilobyte
       $mb = 1024 * $kb;   // Megabyte
       $gb = 1024 * $mb;   // Gigabyte
       $tb = 1024 * $gb;   // Terabyte
   
       if ($isGetSize)
          $size = @filesize($file);
       else
          $size = $file;

       /* If it's less than a kb we just return the size, otherwise we keep going until
       the size is in the appropriate measurement range. */
       if($size < $kb) {

          return getNumberFormat(round($size/$kb, $precision), 2, '.', '') . "KB";       
       }else if($size < $mb) {

          return getNumberFormat(round($size/$kb, $precision), 2, '.', '') . "KB";       

       }else if($size < $gb) {

          return getNumberFormat(round($size/$mb, $precision), 2, '.', '') . "MB";       
       }else if($size < $tb) {

          return getNumberFormat(round($size/$gb, $precision), 2, '.', '') . "GB";       
       }else {

          return getNumberFormat(round($size/$tb, $precision), 2, '.', '') . "TB";       
       }

    } // getFilesize() End


    /**
     * 파일 내용 읽기
     *
     * @param  string  $filename : 파일명
     *
     * @access public
     * @return string  : 파일 내용
     */
    function getFileRead($file) {

        // 파일이 존재하지 않으면
        if (!is_file($file)) return false;

        // 읽기 가능한 파일이 아니면 
        if (!is_readable($file)) return false;

        $fp = fopen($file, "r");

        if (!$fp) return false;

        $string = fread($fp, filesize($file)); 
        
        fclose($fp); 

        return $string; 
    }


    /**
     * 파일을 저장한다
     *
     * @param  string  $newFileName : 저장할 파일명
     * @param  string  $contents    : 저장할 내용
     * @param  string  $mode        : 파일열기 모드
     * $mode : r, w, a, a+, rb ..
     *
     * @access public
     * @return boolean 
     */
    function setFileWrite($saveFilename, $contents, $mode = 'w') {
        
        $fp = fopen($saveFilename, $mode);
        if (!$fp) return false;

        flock( $fp, LOCK_EX);
    
        fwrite($fp, $contents);

		flock( $fp, LOCK_UN);
        fclose($fp);

        return true;
    }

} // SkyFile() end