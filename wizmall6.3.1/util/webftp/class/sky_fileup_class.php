<?php
/** 
* file 업로드 관련 class
* 
* @filename : sky_fileup_class.php
* @version  : v 1.1 2004.04.22 13:47
*             v 1.0 2003.12.04 11:18
* @author    : nsl <smpoem@magicn.com>
* @access    : public
* @copyright : Copyright ⓒ 2002-2003 nsl All rights reserved.
*/


class SkyFileUp {

    var $upDir;      // 업로드 디렉토리명

    var $fileName;   // 파일이름
    var $fileSize;   // 파일크기
    var $fileType;   // 파일 타입
    var $fileNameTmp; // 임시 파일명 (복사할 파이명)

    var $fileNameSub; // 파일이름만 test.jpg -> test
    var $fileExt;     // 파일 확장자 test.jpg -> jpg

    var $fileNameNew;  // 실제로 업로드할 파일이름

    var $notExt = array(); // 업로드 불가 확장자
    var $useExt = array(); // 업로드 가능 확장자

    var $fileSizeMax = 2000000;  // 업로드 제한 파일 크기 (기본 2M)


    function SkyFileUp($upDir = '', $fileSizeMax = '') {

        if (!empty($upDir))
            $this->setUpDir($upDir);

        // 파일 UP MAX 설정
        $this->setMaxUpSize($fileSizeMax);
    }

    /**
     * 파일업로드 디렉토리 설정
     *
     * @param string $dir : 업로드 디렉토리
     *
     * @access public
     * @return void
     */
    function setUpDir($dir) {

        $this->upDir = $dir;
    }

    /**
     * 파일 업로드 제한 용량 설정
     *
     * @param integer $maxSize :
     *
     * @access public
     * @return void
     */
    function setMaxUpSize($maxSize) {

        if (!empty($maxSize))
            $this->fileSizeMax = $maxSize;
    }

    /**
     * 업로드 파일 기본처리
     *
     * @param  string  $nameVar : <input type=file name=ufile ...> 에서 name
     *
     * @access public
     * @return boolean
     */
    function getUploadFile ( $nameVar ) {

        global $_FILES;

        $this->fileName = $_FILES[$nameVar]['name'];
        $this->fileSize = $_FILES[$nameVar]['size'];
        $this->fileType = $_FILES[$nameVar]['type'];
        $this->fileNameTmp = $_FILES[$nameVar]['tmp_name'];

        if ( ($this->fileSize == '0') || ($this->fileSize == '') || ( $this->fileName == '') || ($this->fileNameTmp == 'none') )            
            return false;
        else
            return true;
    }

    /**
     * 업로드 파일 기본처리 -> [배열]일 경우
     *
     * @param  string  $nameVar : <input type=file name=ufile[] ...> 에서 name 
     * @param  integer $key     :  배열키값 ( 0, 1, 2 ...)
     *
     * @access public
     * @return boolean
     */
    function getUploadFileArray ( $nameVar, $key ) {

        global $_FILES;

        $this->fileName = $_FILES[$nameVar]['name'][$key];
        $this->fileSize = $_FILES[$nameVar]['size'][$key];
        $this->fileType = $_FILES[$nameVar]['type'][$key];
        $this->fileNameTmp = $_FILES[$nameVar]['tmp_name'][$key];

        if ( ($this->fileSize == '0') || ($this->fileSize == '') || ( $this->fileName == '') || ($this->fileNameTmp == 'none') )
            return false;
        else
            return true;

    }

    /**
     * 파일 크기 제한 검사
     *
     * @return boolean
     */
    function isFileSize() {

        if ($this->fileSize > $this->fileSizeMax) return false; //업로드 불가
        else return true; // 업로드 가능
    }

    /**
     * 업로드 불가/가능 확장자 설정
     *
     * @param array $notExtList : 업로드 불가 확장자 리스트
     * @param array $useExtList : 업로드 가능 확장자 리스트
     * 
     * @access public
     * @return void
     */
    function setFileExt($notExtList = '', $useExtList = '') {

        if (@is_array($notExtList) && count($notExtList) > 0)
            $this->notExt = $notExtList;

        if (@is_array($useExtList) && count($useExtList) > 0)
            $this->useExt = $useExtList;
    }

    /**
     * 업로드 가능한 확장자 인지 검사
     *
     * @param boolean $isMode : true(업로드 불가 확장자에서 검사), false(업로드 가능 확장자에서 검사)
     * @return boolean
     */
    function isFileExtCheck($isMode = true) {

        if ($isMode) { 
            
            // 업로드 불가 확장자가 지정되어 있다면
            if (count($this->notExt) > 0) {

                if ( in_array($this->fileExt, $this->notExt) ) return true;
                else return false;
            } else {

                return false;
            }

        } else {

            // 업로드 가능 확장자가 지정되어 있다면
            if (count($this->useExt) > 0) {

                if ( in_array($this->fileExt, $this->useExt) ) return true;
                else return false;
            } else {

                return false;
            }
        }
    }


    /**
     * 파일이름 공백제거, - -> _ 로 바꿈
     *
     * @access public
     * @return boolean
     */
    function setFileName() {

        $this->fileName = eregi_replace("[[:space:]]", "_",  $this->fileName);
        $this->fileName = eregi_replace("-", "_",  $this->fileName);
    }

    /**
     * 파일 확장자와 파일이름 분리
     *
     * @access public
     * @return string : 파일 확장자
     * @see : getUploadFile(), getUploadFileArray()
     */
    function getFileExt() {

        $this->fileNameSub = @substr($this->fileName, 0, @strrpos($this->fileName,'.')); // test.jpg -> test
        $this->fileExt     = @substr(@strrchr($this->fileName,'.'), 1);                  // test.jpg -> jpg
    }


    /**
     * 파일이름에서 확장자를 제외한 부분만 구함 (test.jpg -> test)
     *
     * @accsss public
     * @return boolean
     */
    function getFileNameSub() {

        return $this->fileNameSub;
    }

    /**
     * 업로드 임시 파일명 구하기
     *
     * @access public
     * @return string
     */
    function getFileNameTmp() {

        return $this->fileNameTmp;
    }

    /**
     * 업로드된 파일 -> 임시 디렉토리(tmp) -> 업로드 디렉토리로 옮기기
     *
     * @param  string $newFilename : 복사할 파일명
     *
     * @access public
     * @return boolean
     */
    function moveFile() {

        $dest = $this->upDir . '/' . $this->fileNameNew;

        return @move_uploaded_file($this->fileNameTmp, $dest );
    }

    /**
     * 파일 복사하기
     *
     * @param  string $newFilename : 복사할 파일명
     *
     * @access public
     * @return boolean
     */
    function copyFile() {

        $newFilename = $this->upDir . '/' . $this->fileNameNew;

        if ( @copy($this->fileNameTmp, $newFilename) ) {

           @unlink($this->fileNameTmp);
           return true;
        } else  {

            return false;
        }
    }


    /**
     * 디렉토리가 업로드 가능한지 검사
     *
     * @access public
     * @return boolean
     */
    function isUpDirCheck() {

        if (@is_dir($this->upDir)) return true;
        else return false;
    }

    /**
     * 파일이름 중복 검사
     *
     * @access public
     * @return boolean
     */
    function isFileExist() {

       $dest = $this->upDir . '/' . $this->fileNameNew;

	   if (@is_file($dest))  return true;
       else                  return false;
    }

    /**
     * 파일이름 + 확장자 조합 구하기
     *
     * @param string $fileNameSub : 파일이름 부분만
     *
     * @access public
     * @return string 
     */
    function getFileName($fileNameSub = '') {

        if (!empty($fileNameSub))
            $this->fileNameSub = $fileNameSub;

        $this->fileNameNew = $this->fileNameSub . '.' . $this->fileExt;
        return $this->fileNameNew;
    }

} // SkyFileUp() End