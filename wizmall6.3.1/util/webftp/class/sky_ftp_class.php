<?php
/** 
* ftp 관련 class
* 
* @filename : sky_ftp_class.php
* @version  : v 1.0 2004.04.08 18:27:22
*
* @author    : nsl (smpoem@magicn.com)
* @access    : public
* @copyright : Copyright ⓒ 2002-2003 nsl All rights reserved.
*/

//  @about Net_FTP.php PEAR 을 참고해서 만들었습니다.
//* @author Tobias Schlitt <tobias@schlitt.info>
//* @see http://www.schlitt.info
// drwx---r-x  2 system   System            0 Nov 15 11:17 Foo
define("NET_FTP_DIR_EREG", "([-d])([rwx-]{9})[ ]*([0-9]*)[ ]*([a-zA-Z0-9_-]*)[ ]*([a-zA-Z0-9_-]*)[ ]*([0-9]*)[ ]*([A-Za-z]+ [0-9: ]*) (.+)", true);
class SkyFtp {

    var $ftpCon;

    var $ftpHost;
    var $ftpUserID;
    var $ftpUserPW;
    var $ftpPort = '21';

    var $isPassive = false;
    
	function SkyFtp($ftpHost = '', $ftpPort = '', $ftpUserID = '', $ftpUserPW = '') {

        global $rcfg;

        if (!empty($ftpHost))   $this->setFtpHost($ftpHost);
        if (!empty($ftpPort))   $this->setFtpPort($ftpPort);
        if (!empty($ftpUserID)) $this->setFtpUserID($ftpUserID);
        if (!empty($ftpUserPW)) $this->setFtpUserPW($ftpUserPW);

        $this->isPassive = $rcfg->ftpPassiveMode;
	}

    /**
     * 접속
     *
     * @param string $host  : ftp host address
     * @param string $prot  : 접속 port 기본 21
     *
     * @access public
     * @return boolean
     */
    function ftpCon($host = '', $port = '') {

        if (!empty($host))
            $this->setFtpHost($host);

        if (!empty($port))
            $this->setFtpPort($port);

        $this->ftpCon = ftp_connect($this->getFtpHost(), $this->getFtpPort());

        if (!$this->ftpCon) {

            return false;

        } else {

            $this->setPassive();
            return true;
        }

    }

    /**
     * 접속 종료
     *
     * @access public
     * @return void
     * @info   PHP 4.2.0 이상부터는 ftp_close($this->ftpCon) 사용할 것
     */
    function ftpClose() {

        if ($this->ftpCon)
            @ftp_quit($this->ftpCon);

    }


    /**
     * 로그인
     *
     * @param string $userID : ftp userid
     * @param string $userPW : ftp user password
     * 
     * @access public
     * @return boolean : 로그인 성공 유무
     */
    function ftpLogin($userID = '', $userPW = '') {

        if (!empty($userID))
            $this->setFtpUserID($userID);

        if (!empty($userPW))
            $this->setFtpUserPW($userPW);

        if (!$this->ftpCon)
            $this->ftpCon();

        $rs = @ftp_login($this->ftpCon, $this->ftpUserID, $this->ftpUserPW);

        if (!$rs)
            return false;
        else
            return true;
    }


    /**
     * transfer-method to passive mode 설정
     *
     * @access public
     * @return void
     */
    function setPassive() {

        $this->isPassive = true;
        @ftp_pasv($this->ftpCon, true);
    }

    /**
     * transfer-method to active mode 설정
     *
     * @access public
     * @return void
     */
    function setActive() {

        $this->isPassive = false;
        @ftp_pasv($this->ftpCon, false);
    }


    /**
    * 현재 디렉토리 구하기
    *
    * @access public
    * @return string : 현재 디렉토리명
    */
    function ftp_pwd() {

        $rs = @ftp_pwd($this->ftpCon);

        if (!$rs) 
            $this->jsAlertErrorMsg("* 현재 디렉토리를 정보를 구할 수 없습니다!");
        else
            return $rs;
    }


    /**
    * 디렉토리 변경
    *
    * @param string $chdir : 변경할 디렉토리
    *
    * @access public
    * @return boolean
    */
    function ftp_chdir($chdir) {

        if ($chdir == "") return false;

        $rs = @ftp_chdir($this->ftpCon, $chdir);

        if (!$rs)
            $this->jsAlertErrorMsg("* '$chdir' 이 디렉토리로 이동할 수 없습니다!");
        else
            return true;
    }

    /**
    * 디렉토리 한 단계 위로 이동 (작동안함) ftp_chdir('..') 로 사용할 것
    *
    * @access public
    * @return boolean
    */
    function ftp_chup() {

        $rs = @ftp_chup($this->ftpCon);

        if (!$rs)
            $this->jsAlertErrorMsg("* 한단계 위 디렉토리로 이동할 수 없습니다!");
        else
            return true;
    }

    /**
    * 디렉토리 만들기
    *
    * @param string $mkdir : 만들 디렉토리
    *
    * @access public
    * @return boolean
    */
    function ftp_mkdir($mkdir) {

        if ($mkdir == "") return false;

        $mkdir = $this->getRealPath($mkdir);

        $rs = @ftp_mkdir($this->ftpCon, $mkdir);

        if (!$rs)
            return false;
        else
            return true;
    }

    /**
    * 디렉토리 지우기
    *
    * @param string $rmdir : 삭제할 디렉토리
    *
    * @access public
    * @return boolean
    */
    function ftp_rmdir($rmdir) {

        //$rmdir = $this->getRealPath($rmdir);

        // 맨끝에 / 표시가 없으면 붙임
        if ( substr($rmdir, (strlen($rmdir) - 1), 1)  != '/' )
            $rmdir .= '/';

        $rs = @ftp_rmdir($this->ftpCon, $rmdir);

        if (!$rs)
            return false;
        else
            return true;
    }



    /**
    * 파일 이름변경 (주의! : 파일명이 이미 존재하면 덮어 씌움,)
    *
    * @param string $filename      : 현재 파일명     /home/test/file.jpg
    * @param string $filenameNew   : 변경할 파일명   /home/test/file_new.jpg
    *
    * @access public
    * @return boolean
    */
    function ftp_rename($filename, $filenameNew) {

        //$filename = $this->getRealPath($filename);

        // 파일이 존재하면
        if ( @ftp_size($this->ftpCon, $filenameNew) != -1)
            return false;

        // 맨끝에 / 표시가 있으면
        if ( substr($filename, (strlen($filename) - 1), 1) == '/' )
            return false;

        $rs = @ftp_rename($this->ftpCon, $filename, $filenameNew);

        if (!$rs)
            return false;
        else
            return true;
    }



    /**
    * 파일 삭제
    *
    * @param string $filepath : 삭제할 파일명
    *
    * @access public
    * @return boolean
    */
    function ftp_delete($filepath) {

        $filepath = $this->getRealPath($filepath);

        // 맨끝에 / 표시가 있으면
        if ( substr($filepath, (strlen($filepath) - 1), 1) == '/' )
            return false;

        $rs = @ftp_delete($this->ftpCon, $filepath);

        if (!$rs)
            return false;
        else
            return true;
    }


    /**
     * FTP 파일 전송
     *
     * @param string $localFile  : 올일   파일명
     * @param string $remoteFile : 올려질 파일명
     * @param boolean $isOverwrite : 파일이 존재할 경우 -> true(덮어씌움), false(취소)
     * @param string $mode : put mode FTP_BINARY OR FTP_ASCII 
     *   - "FTP_BINARY" (X)
     *   - FTP_BINARY (O)  상수임
     *
     * @access public
     * @return integer  : -2(올릴파일이 존재하지 않음), -3(FTP 전송 실패), -4(파일이 존재함),  1(성공)
     */
    function ftp_put($localFile, $remoteFile,  $isOverwrite = true, $mode = FTP_BINARY) {


        $remoteFile = $this->getRealPath($remoteFile);

        if (!@file_exists($localFile)) {
            return -2;
        }

        // overwrite 체크   파일이 존재                  && !덮어씌움
        if ( @ftp_size($this->ftpCon, $remoteFile) != -1 && !$isOverwrite) {

            return -4;
        }

        if ( !@ftp_put($this->ftpCon, $remoteFile, $localFile, $mode) )
            return -3;

        return 1;
    }


    /**
    * 상대 경로이면 => 절대경로로
    *
    * @param string $dir : 디렉토리
    *
    * @return string : 절대경로
    */
    function getRealPath($dir) {

        // 절대 경로가 아니면
        if (substr($dir, 0, 1) != '/') {

            $curDir = @ftp_pwd($this->ftpCon);

            // 맨뒤에  / 가 없으면
            if ( substr($curDir, (strlen($curDir) - 1), 1 ) != '/') {

                $curDir .= '/';
            }

            $dir = $curDir . $dir;
        }

        return $dir;
    }


    /**
     * This lists up the directory-content and parses the items into well-formated arrays
     * This lists up the directory-content and parses the items into well-formated arrays
     * The results of this array are sorted (dirs on top, sorted by name;
     * files below, sorted by name).
     *
     * @access private
     * @param string $dir The directory to parse
     * @return array $res Lists of dirs and files
     *
     */
     function ftp_rawlist($dir, $isParent = true) {

         $dirs_list  = array();
         $files_list = array();
         $dir_list = ftp_rawlist($this->ftpCon, $dir);

        if ($isParent) {

         // ., .. 추가
         $dirs_list[] = array("name"         =>  '.',
                              "size"         =>  '',
                             "rights"        =>  '',
                             "user"          =>  '',
                             "group"         =>  '',
                             "files_inside"  =>  '',
                             "date"          =>  '',
                             "is_dir"        =>  '');
    
         $dirs_list[] = array("name"         =>  '..',
                              "size"         =>  '',
                             "rights"        =>  '',
                             "user"          =>  '',
                             "group"         =>  '',
                             "files_inside"  =>  '',
                             "date"          =>  '',
                             "is_dir"        =>  '');
        } // if End

        // if 2.1
        if (count($dir_list)) {


         foreach ($dir_list as $entry) {

              // ([1] = directory?, [2] = rights, [3] = files below, [4] = user,
             //  [5] = group, [6] = size, [7] = date, [8]  = name)
             $res_1 = @ereg(NET_FTP_DIR_EREG ,$entry, $eregs);
                
             if (!$res_1) {

                 $this->jsAlertErrorMsg("* 디렉토리 정보에러!");
             }

             // 디렉토리 인가 
             $is_dir = (@trim($eregs[1]) == "d");

             // 날짜
             $date = $this->getDate($eregs[7]);

             if (!$date) {

                 //$this->jsAlertErrorMsg("* 날짜 정보에러!");
             }


             //  디렉토리 
             if ($is_dir) {

                 // 공백이 있는 디렉토리는 인식에 문제가 있어서 출력하지 않는다(PHP 4.1.0에서 테스트)
                 // !디렉토리명에 공백         &&    !숫자로 시작하는 디렉토리명에 공백
                if (!ereg("[[:space:]]", $eregs[8]) && substr($eregs[7], -3, 1) == ":" ) {

                 $dirs_list[] = array("name"         =>  $eregs[8],
                                      "size"         =>  (int)$eregs[6],
                                     "rights"        =>  $eregs[1] . $eregs[2],
                                     "user"          =>  $eregs[4],
                                     "group"         =>  $eregs[5],
                                     "files_inside"  =>  $eregs[3],
                                     "date"          =>  $date,
                                     "is_dir"        =>  $is_dir);
                }

             } else {

                
                 $files_list[] = array("name"        =>  $eregs[8],
                                      "size"         =>  (int)$eregs[6],
                                      "rights"       =>  $eregs[2],
                                      "user"         =>  $eregs[4],
                                      "group"        =>  $eregs[5],
                                      "date"         =>  $date,
                                      "is_dir"       =>  $is_dir);

             }
         } // foreach End
        } // if 2.1 End

         //@usort($dirs_list, array("Net_FTP", "_nat_sort"));
         //@usort($files_list, array("Net_FTP", "_nat_sort"));

         $res["dirs"] = $dirs_list;
         $res["files"] = $files_list;

         return array($dirs_list, $files_list);
    }

    function getDate( $date ) {
        
        // Sep 10 22:06 => Sep 10, <year> 22:06
        if (preg_match("/([A-Za-z]+)[ ]+([0-9]+)[ ]+([0-9]+):([0-9]+)/", $date, $res)) {
            $year   = date("Y");
            $month  = $res[1];
            $day    = $res[2];
            $hour   = $res[3];
            $minute = $res[4];
            $date = "$month $day, $year $hour:$minute";

         }

        $res = strtotime($date);
            
         if (!$res) {

             $res = ''; //$this->jsAlertErrorMsg("* 날짜 에러!");
         }
         return $res;
     }



    // set userID
    function setFtpUserID($userID) {

        $this->ftpUserID = $userID;
    }

    // get userID
    function getFtpUserID() {

        return $this->ftpUserID;
    }

    // set userPW
    function setFtpUserPW($userPW) {

        $this->ftpUserPW = $userPW;
    }

    // get userPW
    function getFtpUserPW() {

        return $this->ftpUserPW;
    }
    // set host
    function setFtpHost($host) {

        $this->ftpHost = $host;
    }

    // get host
    function getFtpHost() {

        return $this->ftpHost;
    }


    // set port
    function setFtpPort($port) {

        $this->ftpPort = $port;
    }

    // get port
    function getFtpPort() {

        return $this->ftpPort;
    }


    //^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ 파일 관련 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

    /**
     * 파일 사이즈를 단위별로 구한다
     *
     * @param  string   $file      : 파일명 또는 파일크기(isGetSize=false)
     * @param  integer  $precision : 소숫점 자릿수
     * @param  boolean  $isGetSize : true(파일사이즈구함), false(구하지 않음)
     *
     * @access public
     * @return string : 파일 사이즈
     */
    function getFileSizeCons($file, $precision = 0, $isGetSize = true) {

       // Setup some common file size measurements.
       $kb = 1024;         // Kilobyte
       $mb = 1024 * $kb;   // Megabyte
       $gb = 1024 * $mb;   // Gigabyte
       $tb = 1024 * $gb;   // Terabyte
   
       if ($isGetSize)
          $size = @filesize($file);
       else
          $size = $file;

       /* If it's less than a kb we just return the size, otherwise we keep going until
       the size is in the appropriate measurement range. */
       if($size < $kb) {

          return SkyFtp::getNumberFormat(round($size/$kb, $precision), 2, '.', '') . "KB";       
       }else if($size < $mb) {

          return SkyFtp::getNumberFormat(round($size/$kb, $precision), 2, '.', '') . "KB";       

       }else if($size < $gb) {

          return SkyFtp::getNumberFormat(round($size/$mb, $precision), 2, '.', '') . "MB";       
       }else if($size < $tb) {

          return SkyFtp::getNumberFormat(round($size/$gb, $precision), 2, '.', '') . "GB";       
       }else {

          return SkyFtp::getNumberFormat(round($size/$tb, $precision), 2, '.', '') . "TB";       
       }

    } // getFilesizeCons() End


    /**
     * 숫자 가공
     *
     * @param  integer  $number : 숫자
     * @param  integer  $decimals :  11.00 <-- . 뒤에 붙일 고정 0의 갯수 11 -> 11.00, 11.2 -> 11.20
     * @param  string   $dec_point : 11.00 -> . 마크
     * @param  string   $thousands_sep : 100,00 -> , 마크
     */
    function getNumberFormat($number, $decimals = 0, $dec_point = '.', $thousands_sep = ',') {

        return number_format($number, $decimals, $dec_point, $thousands_sep);
    }

    /**
     * 파일 시간 꾸미기
     *
     * @param integer $timestemp :
     *
     * @access public
     * @return date
     */
    function getFileTimeCons($timestemp) {

        return date("Y-m-d H:i:s", $timestemp); // 1067559420
    }


    /**
     * 파일 확장자 구하기
     *
     * @param string $filename : 파일명
     *
     * @access public
     * @return string : 파일 확장자
     */
    function getFileExtension($filename) {

        // .bash -> . 으로 시작하면 (확장자가 없으면)
        if (strpos($filename, ".") == '0') return 'notext';

        return substr(strrchr($filename,'.'), 1); // test.gif -> gif
        //return preg_replace('/.*\.(.+?)$/', '\\1', $file );
    }



    /**
     * 접근 가능한 디렉토리인가 ? (705  -> 7(첫번째 자리)로 검사함)
     *
     * @param  string  $dirperms : 디렉토리 퍼미션 (755, 644 ...)
     *
     * @access public
     * @return boolean 
     */
    function isDirAccessPerms($dirperms, $dirAccessPerms = 7) {

        if (substr($dirperms, 0, 1) == $dirAccessPerms) return true;
        else return false;

    }

    /**
     * 접근 가능한 파일인가 ? (705 -> 5(세번째 자리)로 검사함
     *
     * @param  string  $fileperms : 파일 퍼미션 (755, 644 ...)
     *
     * @access public
     * @return boolean 
     */
    function isFileAccessPerms($fileperms, $fileAccessPerms = 4) {
        
        if (substr($fileperms, -1, 1) >= $fileAccessPerms) return true;
        else return false;

    }

    /**
    * 자바 스크립트 에러 메세지
    *
    * @param  string   $string  : 에러메세지
    */
    function jsAlertErrorMsg ($string = '', $isClose = false) {

        $this->ftpClose();
    
        echo "<script language=\"javascript\">
              <!--
                window.alert(\"$string\");
                history.back();
               // -->
               </script>";

        exit();
    }

    /**
     * 파일, 디렉토리 퍼미션 문자 구하기
     *
     * @param  integer  $str : 퍼미션 문자 (--x, rw- ...)
     *
     * @access public
     * @return string : 파일 퍼미션 숫자
     * @see getPermsStrAll()
     */
    function getStrPerms($str) {

        switch($str) {

            case '--x' : $string  = '1'; break;
            case '-w-' : $string  = '2'; break;
            case '-wx' : $string  = '3'; break;
            case 'r--' : $string  = '4'; break;
            case 'r-x' : $string  = '5'; break;
            case 'rw-' : $string  = '6'; break;
            case 'rwx' : $string  = '7'; break;
            default    : $string  = '0';

        } // switch End

        return $string;
    }


    /**
     * 퍼미션 문자 모두 구함
     *
     * @param string $str : 퍼미션 (rwxr-xr-x, drwxr-xrwx ...)
     *
     * @access public
     * @return string : 퍼미션 숫자
     */
    function getStrPermsAll($str) {

        $r = substr($str, 0, 3);
        $w = substr($str, 3, 3);
        $e = substr($str, 6, 3);

        return $this->getStrPerms($r) . $this->getStrPerms($w) . $this->getStrPerms($e);
    }

} //