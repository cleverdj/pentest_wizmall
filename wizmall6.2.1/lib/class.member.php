<?
class member{

	var $dbcon;//db connect 관련 외부 클라스 받기
	var $cfg;//외부 $cfg 관련 배열

## db 클라스 함수 호출용
	function db_connect(&$dbcon){//db_connection 함수 불러오기
		$this->dbcon = $dbcon;
	}

## common 클라스 함수 호출용
	function common(&$common){//db_connection 함수 불러오기
		$this->common = &$common;
	}	

	function point_fnc($id, $point, $ptype){//수정시 class.common.php 으로 통일(현재는 에러 방지용으로..)
		$this->common->point_fnc($id, $point, $ptype, $contents=null, $flag=0);
	}	
#######################################
########   [ 로그인 시작] 
#######################################
	function login_check($userid, $userpwd){
		$userid = trim($userid);
		$userpwd = trim($userpwd);
		if(!$this->savepath) $this->savepath = "../config/wizmember_tmp/login_user";//파일처리시 저장경로 설정
		
		$this->availCheck($userid, $userpwd);//$id, $pwd 등에 대한 유효성 책크
		$list = $this->start_login($userid, $userpwd);//실제 로그인 처리
		$this->updatelogindate($userid);//로그인 데이타를 업데이트 시킨다.
		##회원가입이 아니고 로그인 포인트가 있으면
		if($this->loginform	!= "regis" && $this->loginpoint && $this->membertype!="admin") $this->updateloginpoint($userid, $list["mpointlogindate"]);//로그인 포인트를 업데이트 시킨다.
		
		$this->makelogin($list);//각종 쿠키파일 및 로그인 관련 정보를 만든다.
		
		// 아이디 기억일경우 아이디 저장(3개월간)
		if ($this->saveflag=="1"){
			setcookie("saved_id", $userid, time()+86400*31*3, "/");
			setcookie("saveflag", $this->saveflag, time()+86400*31*3, "/");
		}else{
			setcookie("saved_id", "", 0, "/");
			setcookie("saveflag", "", 0, "/");
		}
	}
	
	function availCheck($userid, $userpwd){//아이디/패스워드 유효성 책크
		$id_leng = strlen($userid);
		if(!$userid || !$userpwd) {
			$str = "아이디와 패스워드를 모두 입력해 주십시오.\\n\\n";
			$this->common->js_alert($str);
		}else if(($id_leng >= 13) || ($id_leng < 4)) {
			$str = "아이디는 4~12자 사이의 영문숫자 혼합으로 구성되어야 합니다.\\n\\n";
			$this->common->js_alert($str);
		}
	}
	
	function get_encrypt_pwd($userpwd){//암호화된 패스워드를 만든다
		$sqlstr = " SELECT PASSWORD('$userpwd') ";
		$list = $this->dbcon->get_one($sqlstr);
		return $list;
	}
	
	function start_login($userid, $userpwd){
		if($this->membertype=="admin"){
				$sqlstr = "SELECT AdminName, Pass FROM wizTable_Main WHERE Grade ='A'";
				$this->dbcon->_query($sqlstr);
				$list = $this->dbcon->_fetch_array();
				$list["mpasswd"]	= $list["Pass"];
				$list["mid"]		= $list["AdminName"];
				$list["mgrade"]		= "admin";
				$list["mname"]		= "관리자";
				$list["mgrantsta"]	="03";
				$this->meminfo		= $list;
		}else{
			/* 아이디 책크 */
			$sqlstr = "SELECT 
			m.mid,m.mpasswd,m.mname,m.mgrade,m.mgrantsta,m.mlogindate,m.mpoint,m.mpointlogindate,
			i.jumin1, i.jumin2, i.email
			FROM wizMembers m
			left join wizMembers_ind i on m.mid = i.id
			WHERE m.mid=binary('$userid')";
			$this->dbcon->_query($sqlstr);
			$this->meminfo = $list = $this->dbcon->_fetch_array();
		}

		$mlogindate			= $list["mlogindate"];
		$mpointlogindate	= $list["mpointlogindate"];
		$encrypt_pwd		= $this->get_encrypt_pwd($userpwd);

		if ( !$list ) {	
			$str = "존재하지 않는 아이디 입니다.";
			$this->common->js_alert($str);
		}else if($list[mpasswd] != $userpwd && $list[mpasswd] != $encrypt_pwd){//패스워드가 일치하지 않을 경우
			$str = "패스워드가 일치하지 않습니다.";
			$this->common->js_alert($str);
		}else if($list[mgrantsta] =='00'){//탈퇴회원
		/*
		 승인여부 책크 00 : 탈퇴  01 : 승인(위즈 메일용)  02 : 비승인(위즈 메일용)  03 : 승인(위즈 몰용)  04 : 비승인(위즈 메일용)
		*/
		
			$str = "이미 탈퇴한 회원입니다. \\n 자세한 사항은 관리자에게 문의하세요.";
			$this->common->js_alert($str);
		
		}else if($list[mgrantsta] !='01' && $list[mgrantsta] !='03'){//승인이 이루어 지지 않았으면
			$str = "승인이 이루어 지지 않았습니다. \\n 자세한 사항은 관리자에게 문의하세요.";
			$this->common->js_alert($str);
		}else return $list;
	}
	
		function makelogin($list){
			/* 성인 인증쿠키 생성 */
			$AdultAge = "19";
			$MEMBER_AGE = substr($list[jumin1], 0, 2);
			$MEMBER_BIRTH = substr($list[jumin2],2,4);
			if (date("Y") - (1900+$MEMBER_AGE) > $AdultAge || (date("Y") - (1900+$MEMBER_AGE) == $AdultAge && $MEMBER_BIRTH >= date("md")) ) {
				$adult = 1;
			}else $adult = 0;
			
			$this->username		= $list["mname"];
			$mid				= $this->meminfo["mid"];
			$mpasswd			= $this->meminfo["mpasswd"];
			$mname				= $this->meminfo["mname"];
			$mgrade				= $this->meminfo["mgrade"];
			$mgrantsta			= $this->meminfo["mgrantsta"];
			$mlogindate			= $this->meminfo["mlogindate"];
			$mpoint				= $this->meminfo["mpoint"];
			$mpointlogindate	= $this->meminfo["mpointlogindate"];
			$mmail				= $this->meminfo["email"];
			
			$MEMBER_INFO = $mid."|".$mpasswd."|".$mname."|".$mgrade."|".$mgrantsta."|".$mlogindate."|".$mpoint."|".$mpointlogindate."|".$adult."|".$mmail;
			
			session_start();
			$session_id = session_id();
			setcookie("usersession", $session_id, 0, "/");
			//setcookie("MEMBER_NAME", $list["mname"], 0, "/");
			//setcookie("MEMBER_ID", $list["mid"], 0, "/");
			//setcookie("MEMBER_GRADE", $list["mgrade"], 0, "/");
			//setcookie("MEMBER_INFO", $MEMBER_INFO, 0, "/");//이후에는 현재 info 정보를 암호화 하여 쿠키저장하고 아래 파일로서 처리
			
			/*******************************************************************************
			회원로그파일의 생성시간을 구해서 2시간(mktime()기준 - 7200)이 경과된 경우 자동삭제..
			*******************************************************************************/
			$LOG_DIR = opendir($this->savepath);
			while($LOG_FILE = readdir($LOG_DIR)) {
				if(is_file($this->savepath."/$LOG_FILE") && mktime() - filemtime($this->savepath."/$LOG_FILE") > 7200) {
					unlink($this->savepath."/$LOG_FILE");
				}
			}
			closedir($LOG_DIR);
			
			$fp = fopen($this->savepath."/".$session_id, "w");
			$LoginTime = time(); 
			fwrite($fp, $MEMBER_INFO);
			fclose($fp);

		}
		

		function updatelogindate($userid){//로그인 데이타를 업데이트 한다.
			$sqlstr = "UPDATE wizMembers SET mloginnum=mloginnum+1, mlogindate = '".time()."' WHERE mid='".$userid."'";
			$this->dbcon->_query($sqlstr);
		}
		
		function updateloginpoint($userid, $mpointlogindate){//
			#최종로그인 시간을 구해 1일이 지났으면 로그인 포인트를 지급한다.
			if($mpointlogindate <= time()-60*60*24*1 || is_null($mpointlogindate)){
				$this->point_fnc($userid, $this->loginpoint, "2");
				$sqlstr = "UPDATE wizMembers SET mloginnum=mloginnum+1, mpointlogindate = '".time()."' WHERE mid='".$userid."'";
				$this->dbcon->_query($sqlstr);
			}
		}
}
?>